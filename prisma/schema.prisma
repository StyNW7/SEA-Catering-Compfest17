generator client {
  provider = "prisma-client-js"
  export   = ["User", "Account", "MealPlan", "Subscription", "Testimonial"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?   // Hashed password
  role          Role      @default(USER) // USER or ADMIN
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscriptions Subscription[]
  testimonials  Testimonial[]
  accounts      Account[] // For NextAuth.js to link with providers
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Enum for user roles
enum Role {
  USER
  ADMIN
}


// MealPlan model
model MealPlan {
  
  id              String     @id @default(cuid())
  name            String
  price           String
  originalPrice   String?
  description     String     @db.Text
  image           String
  category        String     // "weight-loss" | "muscle-building" | "balanced" | "premium"
  popular         Boolean    @default(false)
  features        String[]   // Array of features
  duration        String     // From additionalInfo
  mealsPerDay     Int
  calories        String
  proteinPercent  String     // From macros
  carbsPercent    String     // From macros
  fatsPercent     String     // From macros
  includes        String[]   // Array of included items
  benefits        String[]   // Array of benefits
  sampleMeals     String[]   // Array of sample meals
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relation to subscriptions (if needed)
  subscriptions   Subscription[]

}


// Subscription model
model Subscription {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  planId        String
  mealPlan      MealPlan @relation(fields: [planId], references: [id])
  mealTypes     String[] // e.g., ["Breakfast", "Lunch", "Dinner"]
  deliveryDays  String[] // e.g., ["Monday", "Tuesday"]
  allergies     String?  @db.Text
  totalPrice    Float
  startDate     DateTime @default(now())
  endDate       DateTime? // Optional, for pausing or fixed-term subscriptions
  status        String   @default("Active") // Active, Paused, Canceled
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Testimonial model
model Testimonial {

  id          String   @id @default(cuid())
  name        String
  location    String
  rating      Int      @default(5)
  message     String   @db.Text
  date        DateTime @default(now())
  avatar      String?  @default("/images/placeholder/avatar-1.png")
  verified    Boolean  @default(false)
  plan        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customerId  String?  
  user        User?    @relation(fields: [customerId], references: [id])

}